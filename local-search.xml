<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>v2ray+ws+cloudflare科学上网</title>
    <link href="/2020/07/14/v2ray+ws+cloudflare%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <url>/2020/07/14/v2ray+ws+cloudflare%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="v2ray-ws-cloudflare科学上网"><a href="#v2ray-ws-cloudflare科学上网" class="headerlink" title="v2ray+ws+cloudflare科学上网"></a>v2ray+ws+cloudflare科学上网</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;曾几何时，当年无敌好用的搬瓦工加纸飞机基本已经落得这般境地：</p><img src="http://iqotom.com/wp-content/uploads/2020/02/pingme.png" srcset="/img/loading.gif" alt="img" style="zoom: 80%;" /><p>&emsp;&emsp;对谷歌学术的渴望让我们不得不另辟蹊径。所谓知己知彼百战不殆，首先来了解一下国家防火墙（Great Firewall of China, GFW）是如何检测并ban掉诸如shadowsocks一类代理手段的，这部分参考了UC Berkeley的David Fifield团队<a href="https://ensa.fi/active-probing/#" target="_blank" rel="noopener" title="研究内容">研究内容</a>。</p><p><img src="https://ensa.fi/active-probing/img/active_probing.png" srcset="/img/loading.gif" alt="active probing"></p><center> active probing </center><p>&emsp;&emsp;如上图所示，GFW无法仅通过检查来确定加密的连接是否带有禁止的规避协议。 因此，它会发出自己的探测并观察服务器如何响应。这种方式被成为“active probing”。GFW首先会被动的监视网络流量从而识别出疑似Shadowsocks的网络流量。之后，如上图所示，prober的行为类似一般用户，尝试对疑似Shadowsocks的服务器进行连接，如果服务器使用禁止的协议进行响应，则检查器将执行例如将服务器IP地址添加到黑名单中之类的操作。对单一可疑服务器的检测行为往往来自于大量的ip地址，这使得服务器很难通过阻断疑似GFW ip的数据包来规避检测。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>&emsp;&emsp;V2Ray 是 clowwindy 被喝茶之后 V2Ray 项目组为表示抗议开发的。相较于Shadowsocks，它的配置更加复杂，但是作为一个用于网络交互、路由等网络处理的工具，它的功能更加强大，并且使用了项目组自行开发的VMess协议。</p><p>&emsp;&emsp;<strong>v2ray+websocket+cloudflare</strong>这种方案的基本思路：将流量伪装成Websocket（ws），其实就是把http协议通过url的方式进行了包装。理论上来讲这样已经可以满足科学上网了，伪装ws和https+proxy方式挺类似的，一个是http包装成了ws，一个是http加密变成了https。但是，后者已经被active probing搞得基本灭绝了。</p><p>&emsp;&emsp;因此接下来需要通过内容分发服务(CDN)来中转代理, 这样GFW就很难搞清楚背后的ip到底是多少。CDN SERVER在中间负责中转，而客户端到CDN， CDN到VPS之间有两次HTTPS打包过程。 这里两次打包使用的加密证书一般是不同的。正常情况下，你不去通过其他方式泄漏VPS真实地址，也不使用国内的CDN服务商，那么在国内没人能知道你的VPS真实地址。<a href="https://www.cloudflare.com/zh-cn/network/china/" target="_blank" rel="noopener" title="Cloudflare">Cloudflare</a>可以免费提供CDN服务。</p><p>&emsp;&emsp;tls需要握手时间，cdn有绕路问题，因此这种方式不可避免的会<strong>导致速度变慢</strong>，不过上个谷歌学术查查论文还是没问题的。</p><h2 id="如何搭建"><a href="#如何搭建" class="headerlink" title="如何搭建"></a>如何搭建</h2><p>首先，需要以下几样“原材料”：</p><p>一张信用卡：就不谈了，用于注册VPS；</p><p>一个VPS：<a href="https://education.github.com/pack/offers" target="_blank" rel="noopener" title="Github">github student developer pack</a> 赠送digital ocean的50刀代金券，aws和谷歌云各有免费一年的服务器；</p><p>一个域名：可以从阿里云/腾讯云花一块钱买一个，也可以从<a href="https://www.freenom.com/zh/index.html?lang=zh" target="_blank" rel="noopener">freenom</a>白嫖；</p><p>接下来是具体过程，</p><ol><li><p>在cloudflare添加域名，确保域名能在cloudflare正常使用，通过“添加站点按钮”，选择free plan，接下来添加二级域名A记录到你VPS的ip，如下图添加记录</p><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200716110200.png?raw=true" srcset="/img/loading.gif" alt="微信图片_20200716110200.png" style="zoom:80%;" /></li><li><p>然后点击“代理状态”那个小黄云，让它变成灰色的DNS only状态，接下来保存，继续。网页先别关闭，方便后面用。</p></li><li><p>修改域名的DNS，这里以我使用的腾讯云为例。进入域名管理控制台，根据前面cloudflare给出的Nameservers(NS)修改记录值。</p><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200716013924.png?raw=true" srcset="/img/loading.gif" alt="微信图片_20200716013924.png" style="zoom: 80%;" /></li><li><p>回到之前没关闭的cloudflare页面，点击继续，进入域名管理页面，看到如下界面说明服域名服务器更改还未生效，等几分钟就会生效了</p><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/2019060412.jpg?raw=true" srcset="/img/loading.gif" alt="2019060412.jpg" style="zoom: 80%;" /></li><li><p>接下来在vps上安装v2ray，直接使用233大佬的脚本进行傻瓜式操作（一般好像都推荐用centos系统，不过我在建立vps实例的时候都是用的ubuntu，暂时没发现有什么问题）。</p><p>（1）通过xshell软件root用户ssh到VPS上 </p><p>（2）运行脚本：</p><pre><code class="hljs lisp">bash &lt;(<span class="hljs-name">curl</span> -s -L https<span class="hljs-symbol">://git</span>.io/v2ray.sh)</code></pre><p>（3）进入脚本界面后逐步进行的操作：</p><pre><code class="hljs vala"><span class="hljs-meta"># 选“1”：安装；</span><span class="hljs-meta"># 选“4. WebSocket+TLS”；</span><span class="hljs-meta"># 需要输入v2ray端口，只要不是80和443端口，可以直接回车；</span><span class="hljs-meta"># 输入刚刚cloudflare新增的二级域名，一定要输正确，不然脚本会直接退出。然后按“Y”,继续；</span><span class="hljs-meta"># 域名解析检测正确，安装Caddy自动配置TLS，按“Y”继续（不正确的话脚本也会退出）；</span><span class="hljs-meta"># 是否开启网站伪装和路径分流，默认否；是否开启广告拦截，默认否；是否配置Shadowsocks，默认否；</span><span class="hljs-meta"># 准备安装，确认配置正确，按回车继续，最后如下所示；</span></code></pre></li></ol><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/v2ray_cdn_20.png?raw=true" srcset="/img/loading.gif" alt="v2ray_cdn_20.png" style="zoom:67%;" /><ol start="6"><li><p>回到cloudflare界面，进入SSL/TLS选项卡下方 Overview选项卡，确保 SSL/TLS encryption mode 选择Full，以及边缘证书中的状态为有效，然后回去把变成灰色的小云重新点亮成小黄云，变成DNS and HTTP proxy(CDN)。</p><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200716112403.png?raw=true" srcset="/img/loading.gif" alt="微信图片_20200716112403.png" style="zoom:67%;" /></li></ol><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/image-20200716113643879.png?raw=true" srcset="/img/loading.gif" alt="image-20200716113643879.png" style="zoom:67%;" /><ol start="7"><li><p>配置V2Ray客户端，SSH输入v2ray info可以查看V2Ray的配置信息，输入 v2ray 可以进行脚本管理；输入 v2ray url 可生成 vmess url 链接；输入 v2ray qr 可生成二维码链接。把vemss url链接导入v2ray客户端，移动端就导入BifrostV等app。</p><p><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200716114132.png?raw=true" srcset="/img/loading.gif" alt="微信图片_20200716114132.png"></p></li><li><p>可以愉快的科学上网了</p><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200716114345.png?raw=true" srcset="/img/loading.gif" alt="微信图片_20200716114345.png" style="zoom:67%;" /></li></ol><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>&emsp;&emsp;大体就这样吧，过程不算很详实，特别是v2ray配置的步骤不想一步步的截图，不过按给出的步骤来应该没啥问题。有些要点v2ray脚本在安装的过程中也会有提示。我也是新手，如果有什么疑问，欢迎一起交流。或者直接百度“v2ray+cloudflare+websocket”应该也会有很多其他大佬写的教程。</p><center>enjoy :)</center>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/07/13/hello-world/"/>
    <url>/2020/07/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
