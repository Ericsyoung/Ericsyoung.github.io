<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pta笔记</title>
    <link href="/2021/01/03/pta%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/01/03/pta%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="PTA笔记"><a href="#PTA笔记" class="headerlink" title="PTA笔记"></a>PTA笔记</h1><h3 id="1-第3章-9-字符串转换成十进制整数"><a href="#1-第3章-9-字符串转换成十进制整数" class="headerlink" title="1. 第3章-9 字符串转换成十进制整数"></a>1. <strong>第3章-9</strong> 字符串转换成十进制整数</h3><p>错误：</p><pre><code class="hljs dart"><span class="hljs-built_in">num</span> = <span class="hljs-string">""</span>.join(toTen)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(flag*<span class="hljs-built_in">num</span>,<span class="hljs-number">16</span>))</code></pre><p>正确：</p><pre><code class="hljs lisp">num = int(<span class="hljs-string">""</span>.join(<span class="hljs-name">toTen</span>),<span class="hljs-number">16</span>)print(<span class="hljs-name">flag*num</span>)</code></pre><p>原因：太蠢了</p><h3 id="2-第3章-2-查验身份证"><a href="#2-第3章-2-查验身份证" class="headerlink" title="2. 第3章-2 查验身份证"></a>2. <strong>第3章-2</strong> <strong>查验身份证</strong></h3><pre><code class="hljs python3">n &#x3D; int(input())ids &#x3D; []mark &#x3D; [&#39;1&#39;, &#39;0&#39;, &#39;X&#39;, &#39;9&#39;, &#39;8&#39;, &#39;7&#39;, &#39;6&#39;, &#39;5&#39;, &#39;4&#39;, &#39;3&#39;, &#39;2&#39;]weight &#x3D; [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]for i in range(n):    ids.append(input())count &#x3D; 0for id in ids:    summ &#x3D; 0    for i in range(17):        if &#39;0&#39; &lt;&#x3D; id[i] &lt;&#x3D; &#39;9&#39;:            summ +&#x3D; weight[i] * int(id[i])        else:            print(id)            count +&#x3D; 1            break    z &#x3D; summ % 11    if mark[z] !&#x3D; id[-1]:        print(id)        count +&#x3D; 1if count &#x3D;&#x3D; 0:    print(&#39;All passed&#39;)</code></pre><p>还是有一个bug，暂未发现</p><h3 id="3-第3章-17-删除字符"><a href="#3-第3章-17-删除字符" class="headerlink" title="3. 第3章-17 删除字符"></a>3. 第3章-17 <strong>删除字符</strong></h3><pre><code class="hljs python3">## 例1strs &#x3D; input().strip()tar &#x3D; input().lower().strip()for item in strs.lower():    if item &#x3D;&#x3D; tar:       strs &#x3D; strs.replace(item,&#39;&#39;)print(&#39;result: &#123;&#125;&#39;.format(strs))## 例2lists&#x3D; [1,2,3,4]for item in lists:    item &#x3D; 0</code></pre><p>做这道题时想了一下哪些情况可以动态改变列表，其实这就是<strong>按值传递</strong>和<strong>按引用传递</strong>的问题了。例1中replace函数是可以实现list在循环中动态更改的。在例2中，0仅仅是被赋给了item变量，无法传递到lists中，要想动态改变lists中的值，需要使用索引的方式，即<strong>lists[i] = 0</strong>这样的写法。replace函数其实就是实现了对strs进行了按引用传递。</p><p>按值传递重要特点：传递的是值的拷贝，也就是说传递后就互不相关了。</p><p>按引用传递指的是在方法调用时，传递的参数是按引用进行传递，其实传递的引用的地址，也就是变量所对应的内存空间的地址。</p><h3 id="4-第4章-4-验证“哥德巴赫猜想”"><a href="#4-第4章-4-验证“哥德巴赫猜想”" class="headerlink" title="4. 第4章-4 验证“哥德巴赫猜想”"></a>4. <strong>第4章-4</strong> <strong>验证“哥德巴赫猜想”</strong></h3><pre><code class="hljs python3">n &#x3D; int(input())q &#x3D; 2for num in range(2,n-1):    flag &#x3D; 0    for item in range(2,num): # num是否是素数，用于赋值q        if num % item &#x3D;&#x3D; 0:            flag &#x3D; 1            break    for elem in range(2,n-num): # n-num，即p是否是素数        if (n-num) % elem &#x3D;&#x3D; 0:            flag &#x3D; 1            break        if q &lt;&#x3D; num and flag &#x3D;&#x3D; 0:            q &#x3D; numprint(&#39;&#123;&#125; &#x3D; &#123;&#125; + &#123;&#125;&#39;.format(n,n-q,q))</code></pre><p>最原始的写法，O(n^2)，输入过大时会运行超时。</p><p>本来想直接读出所有素数，然后遍历，直到两个素数都在list里，然后我的好友sstj来教我做事了：</p><pre><code class="hljs python3">def isPrime(n):    # Corner Cases    if (n &lt;&#x3D; 1):        return False    elif (n &lt;&#x3D; 3):        return True    elif (n % 2 &#x3D;&#x3D; 0 or n % 3 &#x3D;&#x3D; 0):        return False    i &#x3D; 5    while i * i &lt;&#x3D; n:        if (n % i &#x3D;&#x3D; 0 or n % (i + 2) &#x3D;&#x3D; 0):            return False        i +&#x3D; 6    return True    def main():    start &#x3D; time.time()    n &#x3D; int(input())    res &#x3D; None    for q in range(2, n - 1):        if isPrime(q) and isPrime(n - q):            res &#x3D; (q, n - q)            break    if res &#x3D;&#x3D; None:        print(&quot;Not found&quot;)    else:        print(&#39;&#123;&#125; &#x3D; &#123;&#125; + &#123;&#125;&#39;.format(n, q, n - q))        print(&quot;finished finding in &#123;&#125;&quot;.format(time.time() - start))    returnmain()</code></pre><p><img src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210102230112918.png" srcset="/img/loading.gif" alt="image-20210102230112918"></p><p>​                                                                                                                          码一下，之后试试</p><h3 id="5-第4章-6-输出前-n-个Fibonacci数"><a href="#5-第4章-6-输出前-n-个Fibonacci数" class="headerlink" title="5.第4章-6 输出前 n 个Fibonacci数"></a>5.<strong>第4章-6</strong> <strong>输出前 n 个Fibonacci数</strong></h3><blockquote><p>“如果使用循环，程序的性能可能会更高，如果使用递归，程序可能更容易理解，如何选择要看什么对你来说更重要。”</p></blockquote><p>为什么递归耗时更长：</p><p>以斐波那契数列举个例子理解下为什么会超时</p><pre><code class="hljs python3">def fib1(n: int):# 最基础的实现方法    if n &lt;&#x3D; 2:        return 1    return fib1(n - 1) + fib1(n - 2)</code></pre><p>我们都知道斐波那契数列从第三项开始每一项为前两项的和，那么如果我们要求第七项，那么流程如下：<br><img src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210103125908094.png" srcset="/img/loading.gif" alt="image-20210103125908094"></p><p>从图中可以看到，重复计算了两遍5，三遍5，四遍3。如果项数很大，重复计算的次数只会越来越多</p><p><strong>优化方法</strong>：</p><ol><li><p>缓存每次新计算的结果，不要一上来，就申请O(n)的空间。</p><pre><code class="hljs python3">from functools import lru_cache@lru_cache(10 ** 8)def fibo(n: int):    if n &lt;&#x3D; 2:        return 1    return fib3(n - 1) + fib3(n - 2)</code></pre></li><li><p>使用一个数组，存放曾经计算过的结果，下次遇到同样的计算，直接获取结果</p><pre><code class="hljs python3">def fibo(n: int):    if n &lt;&#x3D; 2:        return 1    memo &#x3D; [-1] * n    memo[0] &#x3D; memo[1] &#x3D; 1    for i in range(2, n):        memo[i] &#x3D; memo[i - 1] + memo[i - 2]    return memo[n - 1]</code></pre><p>当然个人更喜欢下标从1开始的形式</p><pre><code class="hljs python3">def fibo(n):    if n &lt;&#x3D; 2:        return 1    memo &#x3D; [-1] * (n+1)    memo[1] &#x3D; memo[2] &#x3D; 1    for i in range(3, n+1):        memo[i] &#x3D; memo[i-1] + memo[i-2]    return memo[n]</code></pre></li></ol><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>浙大PTA的一个题库，比较简单，现在两天多吧刷了50道，但明显自己的基础很不好，只好后面再多拿点时间来补一补XD</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>v2ray+ws+cloudflare科学上网</title>
    <link href="/2020/07/14/v2ray+ws+cloudflare%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <url>/2020/07/14/v2ray+ws+cloudflare%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="v2ray-ws-cloudflare科学上网"><a href="#v2ray-ws-cloudflare科学上网" class="headerlink" title="v2ray+ws+cloudflare科学上网"></a>v2ray+ws+cloudflare科学上网</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;曾几何时，当年无敌好用的搬瓦工加纸飞机基本已经落得这般境地：</p><div align=center><img src="http://iqotom.com/wp-content/uploads/2020/02/pingme.png" srcset="/img/loading.gif" alt="img" style="zoom: 80%;" /></div><p>&emsp;&emsp;对谷歌学术的渴望让我们不得不另辟蹊径。所谓知己知彼百战不殆，首先来了解一下国家防火墙（Great Firewall of China, GFW）是如何检测并ban掉诸如shadowsocks一类代理手段的，这部分参考了UC Berkeley的David Fifield团队<a href="https://ensa.fi/active-probing/#" target="_blank" rel="noopener" title="研究内容">研究内容</a>。</p><p><img src="https://ensa.fi/active-probing/img/active_probing.png" srcset="/img/loading.gif" alt="active probing"></p><center> active probing </center><p>&emsp;&emsp;如上图所示，GFW无法仅通过检查来确定加密的连接是否带有禁止的规避协议。 因此，它会发出自己的探测并观察服务器如何响应。这种方式被成为“active probing”。GFW首先会被动的监视网络流量从而识别出疑似Shadowsocks的网络流量。之后，如上图所示，prober的行为类似一般用户，尝试对疑似Shadowsocks的服务器进行连接，如果服务器使用禁止的协议进行响应，则检查器将执行例如将服务器IP地址添加到黑名单中之类的操作。对单一可疑服务器的检测行为往往来自于大量的ip地址，这使得服务器很难通过阻断疑似GFW ip的数据包来规避检测。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>&emsp;&emsp;V2Ray 是 clowwindy 被喝茶之后 V2Ray 项目组为表示抗议开发的。相较于Shadowsocks，它的配置更加复杂，但是作为一个用于网络交互、路由等网络处理的工具，它的功能更加强大，并且使用了项目组自行开发的VMess协议。</p><p>&emsp;&emsp;<strong>v2ray+websocket+cloudflare</strong>这种方案的基本思路：将流量伪装成Websocket（ws），其实就是把http协议通过url的方式进行了包装。理论上来讲这样已经可以满足科学上网了，伪装ws和https+proxy方式挺类似的，一个是http包装成了ws，一个是http加密变成了https。但是，后者已经被active probing搞得基本灭绝了。</p><p>&emsp;&emsp;因此接下来需要通过内容分发服务(CDN)来中转代理, 这样GFW就很难搞清楚背后的ip到底是多少。CDN SERVER在中间负责中转，而客户端到CDN， CDN到VPS之间有两次HTTPS打包过程。 这里两次打包使用的加密证书一般是不同的。正常情况下，你不去通过其他方式泄漏VPS真实地址，也不使用国内的CDN服务商，那么在国内没人能知道你的VPS真实地址。<a href="https://www.cloudflare.com/zh-cn/network/china/" target="_blank" rel="noopener" title="Cloudflare">Cloudflare</a>可以免费提供CDN服务。</p><p>&emsp;&emsp;tls需要握手时间，cdn有绕路问题，因此这种方式不可避免的会<strong>导致速度变慢</strong>，不过上个谷歌学术查查论文还是没问题的。</p><h2 id="如何搭建"><a href="#如何搭建" class="headerlink" title="如何搭建"></a>如何搭建</h2><p>首先，需要以下几样“原材料”：</p><p>一张信用卡：就不谈了，用于注册VPS；</p><p>一个VPS：<a href="https://education.github.com/pack/offers" target="_blank" rel="noopener" title="Github">github student developer pack</a> 赠送digital ocean的50刀代金券，aws和谷歌云各有免费一年的服务器；</p><p>一个域名：可以从阿里云/腾讯云花一块钱买一个，也可以从<a href="https://www.freenom.com/zh/index.html?lang=zh" target="_blank" rel="noopener">freenom</a>白嫖；</p><p>接下来是具体过程，</p><ol><li><p>在cloudflare添加域名，确保域名能在cloudflare正常使用，通过“添加站点按钮”，选择free plan，接下来添加二级域名A记录到你VPS的ip，如下图添加记录</p><div align=center><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200716110200.png?raw=true" srcset="/img/loading.gif" alt="微信图片_20200716110200.png" style="zoom:60%;" /></div></li><li><p>然后点击“代理状态”那个小黄云，让它变成灰色的DNS only状态，接下来保存，继续。网页先别关闭，方便后面用。</p></li><li><p>修改域名的DNS，这里以我使用的腾讯云为例。进入域名管理控制台，根据前面cloudflare给出的Nameservers(NS)修改记录值。</p><div align=center><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200716013924.png?raw=true" srcset="/img/loading.gif" alt="微信图片_20200716013924.png" style="zoom: 60%;" /></div></li><li><p>回到之前没关闭的cloudflare页面，点击继续，进入域名管理页面，看到如下界面说明服域名服务器更改还未生效，等几分钟就会生效了</p><div align=center><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/2019060412.jpg?raw=true" srcset="/img/loading.gif" alt="2019060412.jpg" style="zoom: 80%;" /></div></li><li><p>接下来在vps上安装v2ray，直接使用233大佬的脚本进行傻瓜式操作（一般好像都推荐用centos系统，不过我在建立vps实例的时候都是用的ubuntu，暂时没发现有什么问题）。</p><p>（1）通过xshell软件root用户ssh到VPS上 </p><p>（2）运行脚本：</p><pre><code class="hljs lisp">bash &lt;(<span class="hljs-name">curl</span> -s -L https<span class="hljs-symbol">://git</span>.io/v2ray.sh)</code></pre><p>（3）进入脚本界面后逐步进行的操作：</p><pre><code class="hljs vala"><span class="hljs-meta"># 选“1”：安装；</span><span class="hljs-meta"># 选“4. WebSocket+TLS”；</span><span class="hljs-meta"># 需要输入v2ray端口，只要不是80和443端口，可以直接回车；</span><span class="hljs-meta"># 输入刚刚cloudflare新增的二级域名，一定要输正确，不然脚本会直接退出。然后按“Y”,继续；</span><span class="hljs-meta"># 域名解析检测正确，安装Caddy自动配置TLS，按“Y”继续（不正确的话脚本也会退出）；</span><span class="hljs-meta"># 是否开启网站伪装和路径分流，默认否；是否开启广告拦截，默认否；是否配置Shadowsocks，默认否；</span><span class="hljs-meta"># 准备安装，确认配置正确，按回车继续，最后如下所示；</span></code></pre></li></ol><div align=center><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/v2ray_cdn_20.png?raw=true" srcset="/img/loading.gif" alt="v2ray_cdn_20.png" style="zoom:77%;" /></div><ol start="6"><li><p>回到cloudflare界面，进入SSL/TLS选项卡下方 Overview选项卡，确保 SSL/TLS encryption mode 选择Full，以及边缘证书中的状态为有效，然后回去把变成灰色的小云重新点亮成小黄云，变成DNS and HTTP proxy(CDN)。</p><div align=center><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200716112403.png?raw=true" srcset="/img/loading.gif" alt="微信图片_20200716112403.png" style="zoom:60%;" /></div><div align=center><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/image-20200716113643879.png?raw=true" srcset="/img/loading.gif" alt="image-20200716113643879.png" style="zoom:60%;" /></div></li><li><p>配置V2Ray客户端，SSH输入v2ray info可以查看V2Ray的配置信息，输入 v2ray 可以进行脚本管理；输入 v2ray url 可生成 vmess url 链接；输入 v2ray qr 可生成二维码链接。把vemss url链接导入v2ray客户端，移动端就导入BifrostV等app。</p><p><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200716114132.png?raw=true" srcset="/img/loading.gif" alt="v2ray"></p></li><li><p>可以愉快的科学上网了</p><div align=center><img src="https://github.com/Ericsyoung/Ericsyoung.github.io/blob/master/fig_for_blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200716114345.png?raw=true" srcset="/img/loading.gif" alt="微信图片_20200716114345.png" style="zoom:67%;" /></div></li></ol><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>&emsp;&emsp;大体就这样吧，过程不算很详实，特别是v2ray配置的步骤不想一步步的截图，不过按给出的步骤来应该没啥问题。有些要点v2ray脚本在安装的过程中也会有提示。我也是新手，如果有什么疑问，欢迎一起交流。或者直接百度“v2ray+cloudflare+websocket”应该也会有很多其他大佬写的教程。</p><center>enjoy :)</center>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/07/13/hello-world/"/>
    <url>/2020/07/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
